@* @page "/register"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using RCLApi.DTO
@using RCLApi.Services
@inject NavigationManager NavigationManager

<PageTitle>Criar Registo de Utilizador</PageTitle>
<h3>Criar Registo de Utilizador</h3>
<h4>Utilizador</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Utilizador" OnValidSubmit="AddUser" enctype="multipart/form-data" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary role="alert" />
            <div class="mb-3">
                <div>
                    @if (@Utilizador.Fotografia != null && @Utilizador.Fotografia.Length > 0)
                    {
                        <img title="@Utilizador.Nome" id="imagePreview" class="img-thumbnail  mt-2" src="Utilizador\@Utilizador.Fotografia" style="width:100px;">
                    }
                    else
                    {
                        <img id="imagePreview" class="img-thumbnail mt-2" src="~/images/headicon.png" style="width:100px;">
                    }
                </div>
                <div class="mb-3">
                    <label for="urlimagem" class="form-label">Imagem:</label>
                    <input id="urlimagem"
                           type="file"
                           name="Utilizador.ImageFile"
                           class="form-control"
                           accept=".png, .jpg, .jpeg"
                           onchange="document.getElementById('imagePreview').src = window.URL.createObjectURL(this.files[0])" />
                </div>

                <label for="nome" class="form-label">Nome:</label>
                <InputText id="nome" @bind-Value="Utilizador.Nome" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Utilizador.Nome" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="apelido" class="form-label">Apelido:</label>
                <InputText id="apelido" @bind-Value="Utilizador.Apelido" class="form-control" />
                <ValidationMessage For="() => Utilizador.Apelido" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="mail" class="form-label">Email:</label>
                <InputText id="mail" @bind-Value="Utilizador.EMail" class="form-control" />
                <ValidationMessage For="() => Utilizador.EMail" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="Utilizador.Password" class="form-control" />
                <ValidationMessage For="() => Utilizador.Password" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="nif" class="form-label">Nif:</label>
                <InputNumber id="nif" @bind-Value="Utilizador.NIF" class="form-control" />
                <ValidationMessage For="() => Utilizador.NIF" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary"><img title="Gravar" src="~/images/saveicon.png" style="height:30px" /></button> |
            <a href="/" type="button" class="btn btn-outline-secondary"><img title="Recuar" src="~/images/backicon.png" style="height:30px" /></a>
        </EditForm>
    </div>
</div>

@code{
    [Inject]
    public IApiServices? _apiServices { get; set; }

    [SupplyParameterFromForm]
    public Utilizador Utilizador { get; set; } = new();


    public async Task AddUser()
    {
        try
        {
            if (Utilizador.ImageFile != null)
            {
                if (Utilizador.ImageFile.Length > (200 * 1024))
                    NavigationManager.NavigateTo("/categorias/create");

                if (!isValidFileType(Utilizador.ImageFile.FileName))
                    NavigationManager.NavigateTo("/categorias/create");
                else
                    Utilizador.UrlImagem = Utilizador.ImageFile.FileName;

                using (var dataStream = new MemoryStream())
                {
                    await Utilizador.ImageFile.CopyToAsync(dataStream);
                    Utilizador.Fotografia = dataStream.ToArray();
                }
            }
            var result = await _apiServices.RegistarUtilizador(Utilizador);
        }
        catch (DbUpdateConcurrencyException)
        {
            return;
        }
        NavigationManager.NavigateTo("/");
    }


    bool isValidFileType(string fileName)
    {
        string ext = Path.GetExtension(fileName);
        switch (ext.ToLower())
        {
            case ".jpg":
                return true;
            case ".jpeg":
                return true;
            case ".png":
                return true;
            default:
                return false;
        }
    }

    bool isValidFileType(IFormFile file)
    {
        string ext = Path.GetExtension(file.Name);
        switch (ext.ToLower())
        {
            case ".jpg":
                return true;
            case ".jpeg":
                return true;
            case ".png":
                return true;
            default:
                return false;
        }
    }
} *@